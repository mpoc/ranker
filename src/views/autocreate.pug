doctype html
html(lang='en')
    head
        title Create game
        meta(charset="utf-8")
        meta(name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no")
        link(
            rel="stylesheet"
            href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
            integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
            crossorigin="anonymous"
        )
        script.
            const activateButtons = () => {
                document.getElementById("addItemButton")
                        .addEventListener('click', () => addUrlRow());
                document.getElementById("bulkEditButton")
                        .addEventListener('click', () => bulkEditUrls());
                document.getElementById("saveBulkButton")
                        .addEventListener('click', () => saveBulkEdit());
                document.getElementById("clearItemUrls")
                        .addEventListener('click', () => {
                            clearItemUrlTable();
                            addUrlRow();
                        });
                document.getElementById("submitButton")
                        .addEventListener('click', () => submit(getTitle(), getItemUrls()));
                document.getElementById('manualGame')
                        .addEventListener('click', () => window.location.href = window.location.origin + "/create");
            }

            const saveBulkEdit = () => {
                clearItemUrlTable();
                document.getElementById('bulkEditUrls').value.split("\n").forEach(url => addUrlRow(url));
            }

            const bulkEditUrls = () => {
                document.getElementById('bulkEditUrls').value = getItemUrls().join("\n");
            }

            const addUrlRow = (url) => {
                const table = document.getElementById("itemUrls");
                let row = table.insertRow();

                let urlCell = row.insertCell(0);
                let input = document.createElement('input');
                input.type = "url";
                input.classList.add("itemUrl", "form-control");
                if (url) {
                    input.value = url;
                }
                urlCell.appendChild(input);

                let removeRow = row.insertCell(1);
                let removeButton = document.createElement('button');
                removeButton.type = "button";
                removeButton.classList.add("close", "text-danger");
                removeButton.setAttribute("aria-label", "Close");
                removeButton.innerHTML =
                    `<span aria-hidden="true">&times;</span>`;
                removeButton.addEventListener('click', (el) => deleteRow(el.target.parentNode.parentNode.parentNode));
                removeRow.appendChild(removeButton);
            }

            const deleteRow = (row) => {
                const rowIndex = row.rowIndex;
                document.getElementById("itemUrls").deleteRow(rowIndex - 1);
            }

            const submit = (title, itemUrls) => {
                const json = {
                    "title": title,
                    "itemUrls": itemUrls
                };

                const options = {
                    method: 'POST',
                    body: JSON.stringify(json),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                };

                setSubmitButtonLoading(true);
                fetch('/api/games/auto', options)
                    .then(res => res.json())
                    .then(data => {
                        setSubmitButtonLoading(false);
                        if (data.success) {
                            const objectToSend = {
                                title: json.title,
                                items: data.data.items
                            };

                            const params = {
                                data: JSON.stringify(objectToSend)
                            }

                            const url = new URL(window.location.origin + "/create");
                            url.search = new URLSearchParams(params).toString();

                            window.location.href = url.toString();
                        }
                    })
                    .catch(err => {
                        setSubmitButtonLoading(false);
                        console.error(err);
                    });
            }

            const setSubmitButtonLoading = (isLoading) => {
                const button = document.getElementById('submitButton');
                if (isLoading) {
                    button.disabled = true;

                    let span = document.createElement('span');
                    span.classList.add("spinner-border", "spinner-border-sm");
                    span.setAttribute("role", "status");
                    span.setAttribute("aria-hidden", "true");

                    button.innerHTML = "";
                    button.appendChild(span);
                    button.appendChild(document.createTextNode(" Loading..."));
                } else {
                    button.disabled = false;
                    button.innerHTML = "";
                    button.appendChild(document.createTextNode("Submit"));
                }
            }

            const clearItemUrlTable = () => {
                const oldTbody = document.getElementById('itemUrls');
                const newTbody = document.createElement('tbody');
                oldTbody.parentNode.replaceChild(newTbody, oldTbody);
                newTbody.id = "itemUrls";
            }

            const getTitle = () => {
                return document.getElementById('gameTitle').value;
            }

            const getItemUrls = () => {
                return Array.prototype.map.call(
                    document.getElementsByClassName('itemUrl'),
                    el => el.value
                )
            }

            window.onload = () => {
                activateButtons();
                addUrlRow();
            }
    body
        script(
            src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
            integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
            crossorigin="anonymous"
        )
        script(
            src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
            integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
            crossorigin="anonymous"
        )
        script(
            src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
            integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
            crossorigin="anonymous"
        )
        div.row.justify-content-center.container-fluid
            div.col-auto
                table.table.table-responsive.table-borderless
                    thead.thead-dark
                        tr
                            th Game Name
                    tbody
                        tr
                            td
                                input.form-control#gameTitle(type="text")
                table.table.table-responsive.table-borderless
                    thead.thead-dark
                        tr
                            th URL
                            th
                    tbody#itemUrls
                table.table.table-responsive.table-borderless
                    tbody
                        tr
                            td
                                button#addItemButton.btn.btn-primary(type="button") Add item
                            td
                                button#bulkEditButton.btn.btn-primary(type="button" data-toggle="modal" data-target="#bulkEditModal") Bulk edit items
                                div.modal.fade#bulkEditModal(tabindex="-1" role="dialog" aria-labelledby="bulkEditModalLabel" aria-hidden="true")
                                    div.modal-dialog.modal-lg(role="document")
                                        div.modal-content
                                            div.modal-header
                                              h5.modal-title#bulkEditModalLabel Bulk edit
                                              button.close(type="button" data-dismiss="modal" aria-label="Close")
                                                span(aria-hidden="true") &times;
                                            div.modal-body
                                                div.form-group
                                                    label.col-form-label(for="message-text") Enter your URLs, one URL per line:
                                                    textarea#bulkEditUrls.form-control
                                            div.modal-footer
                                                button.btn.btn-secondary(type="button" data-dismiss="modal") Close
                                                button#saveBulkButton.btn.btn-primary(type="button" data-dismiss="modal") Save changes
                            td
                                button#clearItemUrls.btn.btn-primary(type="button") Clear all URLs
                            td
                                button#submitButton.btn.btn-success(type="button") Submit
                            td
                                button#manualGame.btn.btn-primary(type="button") Manually create game
